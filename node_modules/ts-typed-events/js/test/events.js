"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var src_1 = require("../src");
describe("events", function () {
    it("should exist", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            chai_1.expect(src_1.events).to.exist;
            return [2 /*return*/];
        });
    }); });
    it("should be a function", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            chai_1.expect(src_1.events).to.be.a("function");
            return [2 /*return*/];
        });
    }); });
    it("should create an group of events", function () { return __awaiter(_this, void 0, void 0, function () {
        var group;
        return __generator(this, function (_a) {
            group = src_1.events({
                alpha: new src_1.Event(),
                beta: new src_1.Event(),
                delta: new src_1.Event(),
            });
            chai_1.expect(group).to.be.a("object");
            chai_1.expect(group).to.have.property("alpha");
            chai_1.expect(group.alpha).to.be.an.instanceOf(src_1.Event);
            chai_1.expect(group).to.have.property("beta");
            chai_1.expect(group.beta).to.be.an.instanceOf(src_1.Event);
            chai_1.expect(group).to.have.property("delta");
            chai_1.expect(group.delta).to.be.an.instanceOf(src_1.Event);
            return [2 /*return*/];
        });
    }); });
    it("should have concat", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            chai_1.expect(src_1.events).to.have.property("concat");
            chai_1.expect(src_1.events.concat).to.be.a("function");
            return [2 /*return*/];
        });
    }); });
    it("should concat groups", function () { return __awaiter(_this, void 0, void 0, function () {
        var groupA, groupB, combined;
        return __generator(this, function (_a) {
            groupA = src_1.events({
                alpha: new src_1.Event(),
                beta: new src_1.Event(),
            });
            groupB = src_1.events({
                delta: new src_1.Event(),
                gamma: new src_1.Event(),
            });
            combined = src_1.events.concat(groupA, groupB);
            chai_1.expect(combined).to.be.a("object");
            chai_1.expect(combined).to.have.property("alpha");
            chai_1.expect(combined.alpha).to.be.an.instanceOf(src_1.Event);
            chai_1.expect(combined).to.have.property("beta");
            chai_1.expect(combined.beta).to.be.an.instanceOf(src_1.Event);
            chai_1.expect(combined).to.have.property("delta");
            chai_1.expect(combined.delta).to.be.an.instanceOf(src_1.Event);
            chai_1.expect(combined).to.have.property("gamma");
            chai_1.expect(combined.delta).to.be.an.instanceOf(src_1.Event);
            return [2 /*return*/];
        });
    }); });
    it("should have offAll", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            chai_1.expect(src_1.events).to.have.property("offAll");
            chai_1.expect(src_1.events.offAll).to.be.a("function");
            return [2 /*return*/];
        });
    }); });
    it("should be able to remove all listeners from a group of events", function () { return __awaiter(_this, void 0, void 0, function () {
        var group, callbackHit;
        return __generator(this, function (_a) {
            group = src_1.events({
                alpha: new src_1.Event(),
                beta: new src_1.Event(),
            });
            callbackHit = false;
            group.alpha.on(function () { return callbackHit = true; });
            group.beta.on(function () { return callbackHit = true; });
            src_1.events.offAll(group);
            chai_1.expect(group.alpha.emit(undefined)).to.be.false;
            chai_1.expect(callbackHit).to.be.false;
            chai_1.expect(group.beta.emit(undefined)).to.be.false;
            chai_1.expect(callbackHit).to.be.false;
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=events.js.map