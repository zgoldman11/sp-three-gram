"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Creates a handy interface object of event names for combining linked events.
 *
 * Returns a frozen object of events for easy grouping.
 * @param group an object of events used to group the event by name
 * @returns a frozen object of events for easy grouping
 */
exports.events = (function groupEvents(group) {
    return Object.freeze(group);
}); // any because it lacks the functions below at this moment, so it does not properly implement the interface,
// and there is no easy way in TS to hook that up right now
/**
 * Combines two events objects into one, while creating a TS interface for type checking.
 *
 * Returns a frozen object that is the two lists combined, with B taking precedent over A for conflicts
 * @param eventsA the first object of events to combine with B
 * @param eventsB the second object of events to combine with A
 * @returns a frozen object that is the two lists combined, with B taking precedent over A for conflicts
 */
exports.events.concat = function eventsConcat(eventsA, eventsB) {
    return Object.freeze(__assign({}, eventsA, eventsB));
};
/**
 * Removes all event listeners from a group of events
 * @param group An object of keys mapping to Event instances to remove all the listeners from
 */
exports.events.offAll = function eventsOffAll(group) {
    for (var _i = 0, _a = Object.keys(group); _i < _a.length; _i++) {
        var key = _a[_i];
        var event_1 = group[key];
        event_1.offAll(); // will exist because of Object.keys
    }
};
//# sourceMappingURL=events.js.map