/** A typed event, given a type will emit values of that type to listeners */
export declare class Event<T extends any = undefined> {
    /** All the current listeners for this event */
    private listeners;
    /**
     * Attaches a listener to trigger on all emits for this event
     * @param callback the callback to invoke on all emits
     */
    on(callback: (data: T) => void): void;
    /**
     * Attaches a listener to trigger on only the first emit for this event.
     * After that event is emitted this callback will automatically be removed.
     * @param callback the callback to invoke only the next time this event
     * emits, then that callback is removed from this event
     */
    once(callback: (arg: T) => void): void;
    /**
     * Attaches a listener to trigger on only the first emit for this event.
     *
     * Returns a promise that resolves with the arg the next time this event
     * is triggered (only once).
     * @returns a promise that resolves with the arg the next time this event
     * is triggered (only once)
     */
    once(): Promise<T>;
    /**
     * Removes a callback from the listeners on this event, regardless of once vs on.
     *
     * Returns true if a callback was removed, false otherwise.
     * @param callback The callback to remove
     * @returns true if a callback was removed, false otherwise
     */
    off(listener: ((arg: T) => void) | Promise<T>): boolean;
    /**
     * Removes ALL callbacks from this event, regardless of once vs on.
     *
     * Returns the number of listeners removed.
     * @returns The number of listeners removed
     */
    offAll(): number;
    /**
     * Emits a value to all the listeners, triggering their callbacks.
     *
     * Returns true if the event had listeners, false otherwise.
     * @param arg The argument to emit to all listeners as their argument.
     * @returns true if the event had listeners, false otherwise
     */
    emit(arg: T): boolean;
}
