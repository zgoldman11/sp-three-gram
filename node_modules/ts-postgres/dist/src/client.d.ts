import { postgresqlErrorCodes } from './errors';
import { Query } from './query';
import { Result as _Result, ResultIterator as _ResultIterator, ResultRow as _ResultRow } from './result';
import { DatabaseError, ErrorLevel, TransactionStatus } from './protocol';
import { DataFormat, DataType, Value, ValueTypeReader } from './types';
export declare type Result = _Result<Value>;
export declare type ResultIterator = _ResultIterator<Value>;
export declare type ResultRow = _ResultRow<Value>;
export interface Connect {
}
export interface End {
}
export interface Parameter {
    name: string;
    value: string;
}
export interface ClientNotice extends DatabaseError {
    level: ErrorLevel;
    code: keyof typeof postgresqlErrorCodes;
    message: string;
}
export interface DataTypeError {
    dataType: DataType;
    value: Value;
}
export interface Configuration {
    host?: string;
    port?: number;
    user?: string;
    database?: string;
    password?: string;
    types?: Map<DataType, ValueTypeReader>;
    extraFloatDigits?: number;
    keepAlive?: boolean;
    preparedStatementPrefix?: string;
}
export interface Notification {
    processId: number;
    channel: string;
    payload?: string;
}
export interface PreparedStatement {
    close: (portal?: string) => Promise<void>;
    execute: (values?: Value[], portal?: string, format?: DataFormat | DataFormat[]) => ResultIterator;
}
declare type Callback<T> = (data: T) => void;
export declare class Client {
    readonly config: Configuration;
    private readonly events;
    private ending;
    private connected;
    private connecting;
    private ready;
    private error;
    private readonly encoding;
    private readonly stream;
    private readonly writer;
    private buffer;
    private expect;
    private mustDrain;
    private offset;
    private remaining;
    private bindQueue;
    private closeHandlerQueue;
    private cleanupQueue;
    private errorHandlerQueue;
    private preFlightQueue;
    private rowDescriptionQueue;
    private parameterDescriptionQueue;
    private nextPreparedStatementId;
    private activeDataHandlerInfo;
    closed: boolean;
    processId: number | null;
    secretKey: number | null;
    transactionStatus: TransactionStatus | null;
    constructor(config?: Configuration);
    connect(): Promise<Connect>;
    end(): Promise<End>;
    on(event: 'connect', callback: Callback<Connect>): void;
    on(event: 'end', callback: Callback<End>): void;
    on(event: 'parameter', callback: Callback<Parameter>): void;
    on(event: 'notification', callback: Callback<Notification>): void;
    on(event: 'error', callback: Callback<DatabaseError>): void;
    on(event: 'notice', callback: Callback<ClientNotice>): void;
    prepare(text: string, name?: string, types?: DataType[]): Promise<PreparedStatement>;
    query(query: Query): ResultIterator;
    query(text: string, args?: Value[], types?: DataType[], format?: DataFormat | DataFormat[]): ResultIterator;
    private bindAndExecute;
    private execute;
    private flush;
    private parseError;
    private receive;
}
export {};
