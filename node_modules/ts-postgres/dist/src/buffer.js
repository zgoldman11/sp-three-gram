"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ElasticBuffer {
    constructor(size) {
        this.offset = 0;
        this.buffer = Buffer.allocUnsafe(size);
    }
    clear() {
        this.offset = 0;
    }
    isEmpty() {
        return this.offset === 0;
    }
    reserve(size) {
        let length = this.buffer.length;
        const offset = this.offset;
        const available = length - offset;
        if (available < size) {
            while (available + length < size)
                length *= 2;
            const buffer = Buffer.allocUnsafe(length * 2);
            this.buffer.copy(buffer, 0, 0, offset);
            this.buffer = buffer;
        }
    }
    getBuffer(size) {
        const offset = this.offset;
        this.reserve(size);
        this.offset += size;
        return this.buffer.slice(offset, offset + size);
    }
    slice() {
        const end = this.offset;
        return this.buffer.slice(0, end);
    }
}
exports.ElasticBuffer = ElasticBuffer;
//# sourceMappingURL=buffer.js.map