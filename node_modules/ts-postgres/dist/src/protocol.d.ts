/// <reference types="node" />
import { Socket } from 'net';
import { postgresqlErrorCodes } from './errors';
import { ArrayValue, DataFormat, DataType, Primitive, Value, ValueTypeReader } from './types';
export declare const enum Command {
    Bind = 66,
    Close = 67,
    Describe = 68,
    End = 88,
    Execute = 69,
    Flush = 72,
    Parse = 80,
    Password = 112,
    Query = 81,
    Sync = 83
}
export declare enum ErrorLevel {
    error = "ERROR",
    fatal = "FATAL",
    panic = "PANIC"
}
export declare const enum Message {
    Authentication = 82,
    BackendKeyData = 75,
    BindComplete = 50,
    CloseComplete = 51,
    CommandComplete = 67,
    EmptyQueryResponse = 73,
    ErrorResponse = 69,
    NoData = 110,
    Notice = 78,
    NotificationResponse = 65,
    ParseComplete = 49,
    ParameterDescription = 116,
    ParameterStatus = 83,
    ReadyForQuery = 90,
    RowData = 68,
    RowDescription = 84
}
export declare const enum TransactionStatus {
    Idle = 73,
    InTransaction = 84,
    InError = 69
}
export declare type SegmentValue = Buffer | number | null | string;
export declare type Segment = [SegmentType, SegmentValue];
export declare const enum SegmentType {
    Buffer = 0,
    Float4 = 1,
    Float8 = 2,
    Int8 = 3,
    Int16BE = 4,
    Int32BE = 5,
    UInt32BE = 6
}
export interface RowDescription {
    columns: Uint32Array;
    names: string[];
}
export declare class DatabaseError extends Error {
    level: ErrorLevel;
    code: keyof typeof postgresqlErrorCodes;
    message: string;
    constructor(level: ErrorLevel, code: keyof typeof postgresqlErrorCodes, message: string);
}
export declare function readRowDescription(buffer: Buffer, start: number, types?: ReadonlyMap<DataType, ValueTypeReader>): {
    columns: Uint32Array;
    names: string[];
};
export declare function readRowData(buffer: Buffer, rowDataOffset: number, rowDescription: RowDescription, encoding: string, types: ReadonlyMap<DataType, ValueTypeReader> | null): ArrayValue<Primitive>;
export declare class Reader {
    private readonly buffer;
    private offset;
    constructor(buffer: Buffer, offset: number);
    readInt32BE(): number;
    readCString(encoding: string): string;
}
export declare class Writer {
    private readonly stream;
    private readonly encoding;
    private outgoing;
    constructor(stream: Socket, encoding: string);
    bind(name: string, portal: string, format?: DataFormat | DataFormat[], values?: Value[], types?: DataType[]): void;
    close(name: string, kind: 'S' | 'P'): void;
    describe(name: string, kind: 'S' | 'P'): void;
    end(): void;
    execute(portal: string, limit?: number): void;
    flush(): void;
    parse(name: string, text: string, types?: DataType[]): void;
    password(text: string): void;
    send(): boolean;
    startup(user: string, database: string, extraFloatDigits: number): void;
    sync(): void;
    private getMessageSize;
    private enqueue;
    private sendMessage;
    private write;
}
